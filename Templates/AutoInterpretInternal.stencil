

import Free

{% for proto in types.protocols|internal %}{% if proto.based.Interpretation %}

extension Pure : {{proto.name}} {
    
    {% for variable in proto.variables|instance %}
    @usableFromInline
    var {{variable.name}} : {{variable.typeName}} {
        .pure(meaning)
    }
    {%endfor%}
    {% for method in proto.methods|instance %}
    
    @usableFromInline
    func {{method.name}} -> {{method.returnTypeName}} {
        .pure(meaning)
    }
    {%endfor%}
    
}


extension Map : {{proto.name}} where Base : {{proto.name}} {
    {% for variable in proto.variables|instance %}
    
    @usableFromInline
    var {{variable.name}} : {{variable.typeName}} {
        base.{{variable.name}}.map(transform)
    }
    {%endfor%}
    {% for method in proto.methods|instance %}
    
    @usableFromInline
    func {{method.name}} -> {{method.returnTypeName}} {
        base.{{method.name}}.map(transform)
    }
    {%endfor%}
    
}


extension FlatMap : {{proto.name}} where Base : {{proto.name}}, Next : {{proto.name}} {
    {% for variable in proto.variables|instance %}
    
    @usableFromInline
    var {{variable.name}} : {{variable.typeName}} {
        base.{{variable.name}}
        .flatMap{transform($0).{{variable.name}}}
    }
    {%endfor%}
    {% for method in proto.methods|instance %}
    
    @usableFromInline
    func {{method.name}} -> {{method.returnTypeName}} {
        base.{{method.name}}
        .flatMap{transform($0).{{method.name}}}
    }
    {%endfor%}
    
}


extension Recursive : {{proto.name}} where Recursion : {{proto.name}}  {
    
    {% for variable in proto.variables|instance %}
    @usableFromInline
    var {{variable.name}} : {{variable.typeName}} {
        
        switch self {
        case .pure(let value):
            return .pure(value)
        case .semiPure(let value):
            return value.{{variable.name}}
        case .recursive(let rec, let transform):
            return rec.{{variable.name}}
            .flatMap{transform($0).{{variable.name}}}
        }
        
    }
    {%endfor%}
    {% for method in proto.methods|instance %}
    
    @usableFromInline
    func {{method.name}} -> {{method.returnTypeName}} {
        
        switch self {
        case .pure(let value):
            return .pure(value)
        case .semiPure(let value):
            return value.{{method.name}}
        case .recursive(let rec, let transform):
            return rec.{{method.name}}
            .flatMap{transform($0).{{method.name}}}
        }
        
    }
    {%endfor%}
    
}


extension Discriminative : {{proto.name}} where Good : {{proto.name}}, Bad : {{proto.name}} {
    
    {% for variable in proto.variables|instance %}
    @usableFromInline
    var {{variable.name}} : {{variable.typeName}} {
        
        switch self {
        case .good(let s1):
            return s1.{{variable.name}}.map(Meaning.good)
        case .bad(let s2):
            return s2.{{variable.name}}.map(Meaning.bad)
        }
        
    }
    {%endfor%}
    {% for method in proto.methods|instance %}
    
    @usableFromInline
    func {{method.name}} -> {{method.returnTypeName}} {
        
        switch self {
        case .good(let s1):
            return s1.{{method.name}}.map(Meaning.good)
        case .bad(let s2):
            return s2.{{method.name}}.map(Meaning.bad)
        }
    }
    {%endfor%}
    
}


extension Either : {{proto.name}} where S1 : {{proto.name}}, S2 : {{proto.name}},
                                 S1.Meaning == S2.Meaning {
    
    {% for variable in proto.variables|instance %}
    @usableFromInline
    var {{variable.name}} : {{variable.typeName}} {
        
        switch self {
        case .either(let s1):
            return s1.{{variable.name}}
        case .or(let s2):
            return s2.{{variable.name}}
        }
        
    }
    {%endfor%}
    {% for method in proto.methods|instance %}
    
    @usableFromInline
    func {{method.name}} -> {{method.returnTypeName}} {
        
        switch self {
        case .either(let s1):
            return s1.{{method.name}}
        case .or(let s2):
            return s2.{{method.name}}
        }
    }
    {%endfor%}
    
}


extension Either3 : {{proto.name}} where S1 : {{proto.name}}, S2 : {{proto.name}}, S3 : {{proto.name}},
                                 S1.Meaning == S2.Meaning, S2.Meaning == S3.Meaning {
    
    {% for variable in proto.variables|instance %}
    @usableFromInline
    var {{variable.name}} : {{variable.typeName}} {
        
        switch self {
        case .first(let s1):
            return s1.{{variable.name}}
        case .second(let s2):
            return s2.{{variable.name}}
        case .third(let s3):
            return s3.{{variable.name}}
        }
        
    }
    {%endfor%}
    {% for method in proto.methods|instance %}
    
    @usableFromInline
    func {{method.name}} -> {{method.returnTypeName}} {
        
        switch self {
        case .first(let s1):
            return s1.{{method.name}}
        case .second(let s2):
            return s2.{{method.name}}
        case .third(let s3):
            return s3.{{method.name}}
        }
    }
    {%endfor%}
    
}


extension Either4 : {{proto.name}} where S1 : {{proto.name}}, S2 : {{proto.name}},
S3 : {{proto.name}}, S4 : {{proto.name}},
                                 S1.Meaning == S2.Meaning, S2.Meaning == S3.Meaning, S3.Meaning == S4.Meaning {
    
    {% for variable in proto.variables|instance %}
    @usableFromInline
    var {{variable.name}} : {{variable.typeName}} {
        
        switch self {
        case .first(let s1):
            return s1.{{variable.name}}
        case .second(let s2):
            return s2.{{variable.name}}
        case .third(let s3):
            return s3.{{variable.name}}
        case .fourth(let s4):
            return s4.{{variable.name}}
        }
        
    }
    {%endfor%}
    {% for method in proto.methods|instance %}
    
    @usableFromInline
    func {{method.name}} -> {{method.returnTypeName}} {
        
        switch self {
        case .first(let s1):
            return s1.{{method.name}}
        case .second(let s2):
            return s2.{{method.name}}
        case .third(let s3):
            return s3.{{method.name}}
        case .fourth(let s4):
            return s4.{{method.name}}
        }
    }
    {%endfor%}
    
}


extension Either5 : {{proto.name}} where S1 : {{proto.name}}, S2 : {{proto.name}},
S3 : {{proto.name}}, S4 : {{proto.name}} , S5 : {{proto.name}},
                                 S1.Meaning == S2.Meaning, S2.Meaning == S3.Meaning, S3.Meaning == S4.Meaning, S4.Meaning == S5.Meaning {
    
    {% for variable in proto.variables|instance %}
    @usableFromInline
    var {{variable.name}} : {{variable.typeName}} {
        
        switch self {
        case .first(let s1):
            return s1.{{variable.name}}
        case .second(let s2):
            return s2.{{variable.name}}
        case .third(let s3):
            return s3.{{variable.name}}
        case .fourth(let s4):
            return s4.{{variable.name}}
        case .fifth(let s5):
            return s5.{{variable.name}}
        }
        
    }
    {%endfor%}
    {% for method in proto.methods|instance %}
    
    @usableFromInline
    func {{method.name}} -> {{method.returnTypeName}} {
        
        switch self {
        case .first(let s1):
            return s1.{{method.name}}
        case .second(let s2):
            return s2.{{method.name}}
        case .third(let s3):
            return s3.{{method.name}}
        case .fourth(let s4):
            return s4.{{method.name}}
        case .fifth(let s5):
            return s5.{{method.name}}
        }
    }
    {%endfor%}
    
}

{% endif %}{% endfor %}
